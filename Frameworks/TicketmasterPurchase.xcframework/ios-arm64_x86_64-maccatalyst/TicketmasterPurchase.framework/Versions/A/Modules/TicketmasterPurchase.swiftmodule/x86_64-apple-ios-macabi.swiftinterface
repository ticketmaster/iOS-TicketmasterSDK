// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios16.6-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TicketmasterPurchase
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AppKit
import AuthenticationServices
import DeveloperToolsSupport
import Foundation
import SafariServices
import Swift
import SwiftUI
import TicketmasterAuthentication
import TicketmasterDiscoveryAPI
import TicketmasterFoundation
@_exported import TicketmasterPurchase
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol TMPurchaseUserAnalyticsDelegate : AnyObject {
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, didBeginTicketSelectionFor event: TicketmasterDiscoveryAPI.DiscoveryEvent)
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, didEndTicketSelectionFor event: TicketmasterDiscoveryAPI.DiscoveryEvent, because reason: TicketmasterPurchase.TMEndTicketSelectionReason)
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, didBeginCheckoutFor event: TicketmasterDiscoveryAPI.DiscoveryEvent)
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, didEndCheckoutFor event: TicketmasterDiscoveryAPI.DiscoveryEvent, because reason: TicketmasterPurchase.TMEndCheckoutReason)
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, didMakePurchaseFor event: TicketmasterDiscoveryAPI.DiscoveryEvent, order: TicketmasterPurchase.TMPurchaseOrder)
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, didPressNavBarButtonFor event: TicketmasterDiscoveryAPI.DiscoveryEvent, button: TicketmasterPurchase.TMPurchaseNavBarButton)
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, didShare event: TicketmasterDiscoveryAPI.DiscoveryEvent, activityType: UIKit.UIActivity.ActivityType)
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, didViewSubPageFor event: TicketmasterDiscoveryAPI.DiscoveryEvent, subPage: TicketmasterPurchase.TMPurchaseSubPage)
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, didMakeDecisionFor event: TicketmasterDiscoveryAPI.DiscoveryEvent, component: TicketmasterPurchase.TMPurchaseComponent, decision: TicketmasterPurchase.TMPurchaseDecision)
}
public enum TMEndTicketSelectionReason : Swift.String {
  case userDismissedTicketSelection
  case ticketSelectionError
  case eventIdentifierInvalid
  case checkoutBegan
  case maintenanceMode
  case redirectedToEventBrowsing
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TMEndCheckoutReason : Swift.String {
  case userDismissedCheckout
  case checkoutCartError
  case checkoutCartNotLoggedIn
  case cartTimerExpired
  case userCompletedPurchase
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TMPurchaseNavBarButton : Swift.String {
  case infoButton
  case calendarButton
  case favoriteButton
  case shareButton
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TMPurchaseSubPage : Swift.String {
  case edpSmartQueue
  case edpListView
  case edpSeatMap
  case edpOfferCard
  case cartUpsells
  case cartShipping
  case cartBilling
  case cartComplete
  case cartExternalURL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TMPurchaseComponent : Swift.String {
  case ticketReleaseConfirmation
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TMPurchaseDecision : Swift.String {
  case confirm
  case cancel
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol TMPurchaseWebAnalyticsDelegate : AnyObject {
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, pageLoadDidErrorFor url: Foundation.URL, error: Foundation.NSError)
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, webPageDidErrorFor url: Foundation.URL, errorString: Swift.String)
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, webPageDidReportUALPageView pageView: TicketmasterFoundation.UALPageView)
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, webPageDidReportUALCommerceEvent commerceEvent: TicketmasterFoundation.UALCommerceEvent)
}
public struct CheckoutConfirmationHandler {
  public static func handleCheckoutCompletion(withURL deepLinkURL: Foundation.URL)
}
@objc @objcMembers @_Concurrency.MainActor @preconcurrency public class POPPopupBridge : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler {
  @objc @_Concurrency.MainActor @preconcurrency public init(webView: WebKit.WKWebView, prefersEphemeralWebBrowserSession: Swift.Bool = true)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension TicketmasterPurchase.POPPopupBridge : AuthenticationServices.ASWebAuthenticationPresentationContextProviding {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
}
@objc @_inheritsConvenienceInitializers final public class TMPurchase : ObjectiveC.NSObject {
  public static let shared: TicketmasterPurchase.TMPurchase
  final public var version: Swift.String {
    get
  }
  final public var sdkBuildInfo: [Swift.String : Any]? {
    get
  }
  final public func configure(apiKey: Swift.String, region: TicketmasterAuthentication.TMAuthentication.TMXDeploymentRegion = .US, completion: @escaping (_ didSetMarketDomain: Swift.Bool) -> Swift.Void)
  final public func configure(tmxSettings: TicketmasterAuthentication.TMAuthentication.TMXSettings, completion: @escaping (_ didSetMarketDomain: Swift.Bool) -> Swift.Void)
  final public var marketDomain: TicketmasterFoundation.MarketDomain {
    get
    set
  }
  final public var environment: TicketmasterPurchase.TMPurchase.Environment {
    get
    set
  }
  final public var brandColor: UIKit.UIColor
  final public var useDebugAnalytics: Swift.Bool
  final public var disableUFCLoginManagement: Swift.Bool
  final public var dismissUponCompletion: Swift.Bool
  @available(*, deprecated, message: "Use method configure(apiKey:region:completion:) instead")
  final public var apiKey1: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TMPurchaseOrder : ObjectiveC.NSObject {
  final public let identifier: Swift.String?
  final public let date: Foundation.Date
  final public let discoveryEvent: TicketmasterDiscoveryAPI.DiscoveryEvent?
  final public let eventIdentifier: Swift.String?
  final public let eventName: Swift.String?
  final public let attractionIdentifier: Swift.String?
  final public let attractionName: Swift.String?
  final public let venueIdentifier: Swift.String?
  final public let venueName: Swift.String?
  final public let majorCategoryName: Swift.String?
  final public let minorCategoryName: Swift.String?
  final public let promoterIdentifier: Swift.String?
  final public let edpType: Swift.String?
  final public let isResale: Swift.Bool
  final public let ticketQuantity: Swift.Int?
  final public let currencyCode: Swift.String?
  final public let basePriceTotal: Foundation.NSDecimalNumber
  final public let shippingTotal: Foundation.NSDecimalNumber
  final public let orderProcessingFeeTotal: Foundation.NSDecimalNumber
  public var upsellTotal: Foundation.NSDecimalNumber
  public var voucherDiscountTotal: Foundation.NSDecimalNumber
  final public let taxTotal: Foundation.NSDecimalNumber
  final public let grandTotal: Foundation.NSDecimalNumber
  final public let items: [TicketmasterPurchase.TMPurchaseOrder.Item]
  final public let billingCountry: Swift.String?
  final public let billingPostalCode: Swift.String?
  final public let billingStateProvince: Swift.String?
  final public let paymentMethod: Swift.String?
  final public let shippingMethod: Swift.String?
  final public let rawJSON: TicketmasterFoundation.JSONDictionary?
  public init(identifier: Swift.String? = nil, date: Foundation.Date? = nil, discoveryEvent: TicketmasterDiscoveryAPI.DiscoveryEvent? = nil, eventIdentifier: Swift.String? = nil, eventName: Swift.String? = nil, attractionIdentifier: Swift.String? = nil, attractionName: Swift.String? = nil, venueIdentifier: Swift.String? = nil, venueName: Swift.String? = nil, majorCategoryName: Swift.String? = nil, minorCategoryName: Swift.String? = nil, promoterIdentifier: Swift.String? = nil, edpType: Swift.String? = nil, isResale: Swift.Bool = false, ticketQuantity: Swift.Int? = nil, currencyCode: Swift.String? = nil, basePriceTotal: Foundation.NSDecimalNumber? = nil, shippingTotal: Foundation.NSDecimalNumber? = nil, orderProcessingFeeTotal: Foundation.NSDecimalNumber? = nil, upsellTotal: Foundation.NSDecimalNumber? = nil, voucherDiscountTotal: Foundation.NSDecimalNumber? = nil, taxTotal: Foundation.NSDecimalNumber? = nil, grandTotal: Foundation.NSDecimalNumber? = nil, items: [TicketmasterPurchase.TMPurchaseOrder.Item]? = nil, billingCountry: Swift.String? = nil, billingPostalCode: Swift.String? = nil, billingStateProvince: Swift.String? = nil, paymentMethod: Swift.String? = nil, shippingMethod: Swift.String? = nil, rawJSON: TicketmasterFoundation.JSONDictionary? = nil)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public class Item : ObjectiveC.NSObject {
    final public let ticketTypeIdentifier: Swift.String?
    final public let ticketTypeName: Swift.String?
    final public let basePrice: Foundation.NSDecimalNumber
    final public let convenienceFee: Foundation.NSDecimalNumber
    final public let facilityFee: Foundation.NSDecimalNumber
    final public let tax: Foundation.NSDecimalNumber
    final public let quantity: Swift.Int?
    final public let variant: Swift.String?
    final public let productType: Swift.String?
    public init(ticketTypeIdentifier: Swift.String?, ticketTypeName: Swift.String?, basePrice: Foundation.NSDecimalNumber?, convenienceFee: Foundation.NSDecimalNumber?, facilityFee: Foundation.NSDecimalNumber?, tax: Foundation.NSDecimalNumber?, quantity: Swift.Int?, variant: Swift.String?, productType: Swift.String?)
    @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
extension TicketmasterPurchase.TMPurchaseOrder {
  public var convenienceFeeTotal: Foundation.NSDecimalNumber {
    get
  }
  public var otherFeeTotal: Foundation.NSDecimalNumber {
    get
  }
}
extension TicketmasterPurchase.TMPurchaseOrder.Item {
  public var otherFee: Foundation.NSDecimalNumber {
    get
  }
}
extension TicketmasterPurchase.TMPurchaseOrder {
  convenience public init(jsonString: Swift.String?, discoveryEvent: TicketmasterDiscoveryAPI.DiscoveryEvent?)
  convenience public init(jsonDictionary: TicketmasterFoundation.JSONDictionary, discoveryEvent: TicketmasterDiscoveryAPI.DiscoveryEvent?)
}
extension TicketmasterPurchase.TMPurchaseOrder.Item {
  convenience public init(jsonDictionary: TicketmasterFoundation.JSONDictionary)
}
extension TicketmasterPurchase.TMPurchase {
  public enum Environment : Swift.Codable, Swift.Hashable, Swift.CaseIterable {
    case production
    case productionLiveNation
    case alpha
    case beta
    case appDemo
    case preProduction1
    case preProduction2
    case preProduction3
    case staging
    case qa
    case testingProduction1
    case testingProduction2
    case edpAlpha
    case edpQA11
    case edpQA12
    case edpQA13
    case edpQA14
    case edpQA15
    case edpQA16
    case checkoutAlpha
    case checkoutQA1
    case checkoutQA2
    case checkoutQA3
    case checkoutQA4
    case checkoutQA5
    case localHost
    case custom(baseUrlString: Swift.String)
    public static var allCases: [TicketmasterPurchase.TMPurchase.Environment]
    public var isForProduction: Swift.Bool {
      get
    }
    public var isForTesting: Swift.Bool {
      get
    }
    public func httpHostString(forMarketDomain marketDomain: TicketmasterFoundation.MarketDomain) -> Swift.String
    public var keyValue: Swift.String {
      get
    }
    public init(keyValue: Swift.String)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TicketmasterPurchase.TMPurchase.Environment, b: TicketmasterPurchase.TMPurchase.Environment) -> Swift.Bool
    public typealias AllCases = [TicketmasterPurchase.TMPurchase.Environment]
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension TicketmasterPurchase.TMPurchase.Environment {
  public init(tmxDeploymentEnvironment: TicketmasterAuthentication.TMAuthentication.TMXDeploymentEnvironment)
}
@objc public class TMPurchaseWebsiteConfiguration : ObjectiveC.NSObject {
  public var eventID: Swift.String
  public var attractionID: Swift.String?
  public var brandName: Swift.String?
  public var showNFLBranding: Swift.Bool
  @available(*, deprecated, message: "Use TMPurchase.shared.marketDomain instead")
  public var marketDomain: TicketmasterFoundation.MarketDomain
  public var discreteID: Swift.String?
  public var originID: (Swift.String, Swift.String)?
  public var subchannelID: Swift.String?
  public var cameFromCode: Swift.String?
  public var showResaleSoftLanding: Swift.Bool
  public var showResaleMessageBanner: Swift.Bool
  public var showInfoToolbarButton: Swift.Bool
  public var showCalendarToolbarButton: Swift.Bool
  public var showFavoriteToolbarButton: Swift.Bool
  public var showShareToolbarButton: Swift.Bool
  public var customTitleFont: UIKit.UIFont?
  public var additionalURLParameters: [Swift.String : Swift.String]
  public var internalTestingKeys: [Swift.String : Any]
  public init(eventID: Swift.String)
  @objc deinit
}
public protocol TMPurchaseNavigationDelegate : AnyObject {
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, didFailToLoadWith error: any Swift.Error)
  func purchaseNavigationControllerDidFinish(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController)
}
public protocol TMPurchaseSharingDelegate : AnyObject {
  func purchaseNavigationController(_ purchaseNavigationController: TicketmasterPurchase.TMPurchaseNavigationController, sharingMessageFor event: TicketmasterDiscoveryAPI.DiscoveryEvent, completion: @escaping (_ sharingMessage: Swift.String) -> Swift.Void)
}
@objc @_Concurrency.MainActor @preconcurrency public class TMPurchaseNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency public var purchaseMarketDomain: TicketmasterFoundation.MarketDomain?
  @_Concurrency.MainActor @preconcurrency public init(configuration: TicketmasterPurchase.TMPurchaseWebsiteConfiguration, discoveryEvent: TicketmasterDiscoveryAPI.DiscoveryEvent? = nil)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency weak public var sharingDelegate: (any TicketmasterPurchase.TMPurchaseSharingDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency weak public var navigationDelegate: (any TicketmasterPurchase.TMPurchaseNavigationDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency weak public var userAnalyticsDelegate: (any TicketmasterPurchase.TMPurchaseUserAnalyticsDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency weak public var webAnalyticsDelegate: (any TicketmasterPurchase.TMPurchaseWebAnalyticsDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func checkoutDidReceive(paymentNonce: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func checkoutDidReceive(paymentError: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
}
extension TicketmasterPurchase.TMPurchaseNavigationController {
  @_Concurrency.MainActor @preconcurrency public class func eventDetailsNavigationController(eventIdentifier: Swift.String, internalTestingKeys: [Swift.String : Any] = [:], marketDomain: TicketmasterFoundation.MarketDomain = .US, customFont: UIKit.UIFont? = nil) -> TicketmasterPurchase.TMPurchaseNavigationController
}
extension TicketmasterPurchase.TMEndTicketSelectionReason : Swift.Equatable {}
extension TicketmasterPurchase.TMEndTicketSelectionReason : Swift.Hashable {}
extension TicketmasterPurchase.TMEndTicketSelectionReason : Swift.RawRepresentable {}
extension TicketmasterPurchase.TMEndCheckoutReason : Swift.Equatable {}
extension TicketmasterPurchase.TMEndCheckoutReason : Swift.Hashable {}
extension TicketmasterPurchase.TMEndCheckoutReason : Swift.RawRepresentable {}
extension TicketmasterPurchase.TMPurchaseNavBarButton : Swift.Equatable {}
extension TicketmasterPurchase.TMPurchaseNavBarButton : Swift.Hashable {}
extension TicketmasterPurchase.TMPurchaseNavBarButton : Swift.RawRepresentable {}
extension TicketmasterPurchase.TMPurchaseSubPage : Swift.Equatable {}
extension TicketmasterPurchase.TMPurchaseSubPage : Swift.Hashable {}
extension TicketmasterPurchase.TMPurchaseSubPage : Swift.RawRepresentable {}
extension TicketmasterPurchase.TMPurchaseComponent : Swift.Equatable {}
extension TicketmasterPurchase.TMPurchaseComponent : Swift.Hashable {}
extension TicketmasterPurchase.TMPurchaseComponent : Swift.RawRepresentable {}
extension TicketmasterPurchase.TMPurchaseDecision : Swift.Equatable {}
extension TicketmasterPurchase.TMPurchaseDecision : Swift.Hashable {}
extension TicketmasterPurchase.TMPurchaseDecision : Swift.RawRepresentable {}
extension TicketmasterPurchase.POPPopupBridge : Swift.Sendable {}
