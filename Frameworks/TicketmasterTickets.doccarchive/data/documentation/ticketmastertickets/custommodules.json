{"abstract":[{"text":"A ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule","isActive":true},{"type":"text","text":" is defined by three values:"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/ticketmastertickets\/custommodules"]},{"paths":["\/documentation\/ticketmastertickets\/custommodules"],"traits":[{"interfaceLanguage":"occ"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/CustomModules"},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"Custom Module","modules":[{"name":"TicketmasterTickets"}],"roleHeading":"Article","role":"article"},"hierarchy":{"paths":[["doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets"]]},"kind":"article","primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"A unique identifier string","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An optional Header View"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"0 to 3 Buttons","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See: "},{"type":"reference","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule\/init(identifier:headerDisplay:actionButtons:)","isActive":true}]},{"inlineContent":[{"type":"text","text":"Modules are built and returned in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModuleDelegate\/addCustomModules(event:completion:)"}],"type":"paragraph"},{"code":["extension MyClass: TMTicketsModuleDelegate {    ","","    func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","        \/\/ build a UIView","        let view = UIView()","        view.backgroundColor = .red","    ","        \/\/ build Header with UIView","        let header = TMTicketsModule.HeaderDisplay(view: view)","    ","        \/\/ build buttons","        let button1 = TMTicketsModule.ActionButton(title: \"One\")","        let button2 = TMTicketsModule.ActionButton(title: \"Two\")","        let button3 = TMTicketsModule.ActionButton(title: \"Three\")","","        \/\/ build module with header and buttons","        let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                    headerDisplay: header,","                                    actionButtons: [button1, button2, button3])","    ","        \/\/ return modules in display order","        completion([module])","    }","}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Output:"},{"text":" ","type":"text"},{"identifier":"Module_DefaultAspect.jpg","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"Let’s examine each of these three values in detail.","type":"text"}]},{"type":"heading","level":2,"anchor":"Identifier","text":"Identifier"},{"type":"paragraph","inlineContent":[{"text":"A globally unique indentifier is best to avoid conflicts with any internal or pre-built module names.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We recommend using a reverse URL style.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Unique examples:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"“com.ticketmaster.seatUpgrades”"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"“com.nfl.broncosSeating”"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"“com.myDemoApp.demoModule”"}]}]}],"type":"unorderedList"},{"anchor":"Header","type":"heading","level":2,"text":"Header"},{"inlineContent":[{"type":"text","text":"While optional, the Header is the most easily visible component of a Module."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A Header ("},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule\/HeaderDisplay-swift.class"},{"text":") is simply a wrapper around a UIView.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Note that a Module can contain a Header with no Buttons, or Buttons with no Header.","type":"text"}]},{"text":"Size","anchor":"Size","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"The Header is automatically resized to the width of the user’s phone, so you can only really control the height. This is done by setting an aspect ratio."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The default aspect ratio (3x2) is recommended for visual consistancy.","type":"text"}]},{"text":"Header Default Aspect Ratio","type":"heading","level":2,"anchor":"Header-Default-Aspect-Ratio"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Build a module with a Red header, using the default aspect ratio (3x2).","type":"text"}]}]}]},{"type":"codeListing","code":["func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","    \/\/ build a UIView (with default aspect ratio 3x2)","    let view = UIView()","    view.backgroundColor = .red","    ","    \/\/ build header with UIView","    let header = TMTicketsModule.HeaderDisplay(view: view)","    ","    \/\/ build buttons","    let button1 = TMTicketsModule.ActionButton(title: \"One\")","    let button2 = TMTicketsModule.ActionButton(title: \"Two\")","    let button3 = TMTicketsModule.ActionButton(title: \"Three\")","","    \/\/ build module with header and buttons","    let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                 headerDisplay: header,","                                 actionButtons: [button1, button2, button3])","    ","    \/\/ return module","    completion([module])","}"],"syntax":null},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Output:"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"Module_DefaultAspect.jpg"}]},{"type":"heading","text":"Header Custom Aspect Ratio","level":2,"anchor":"Header-Custom-Aspect-Ratio"},{"type":"paragraph","inlineContent":[{"text":"The Header inherits it’s aspect ratio from the provided UIView, so by setting the size of the UIView you can alter the aspect ratio of the Header.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Build a module with a Red header, using a custom defined aspect ratio (1x1)."}],"type":"paragraph"}]}]},{"syntax":null,"code":["func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","    \/\/ build a UIView (with a defined aspect ratio)","    let view = UIView(frame: CGRect(x: 0, y: 0, width: 1, height: 1))","    view.backgroundColor = .red","    ","    \/\/ build header with UIView","    let header = TMTicketsModule.HeaderDisplay(view: view)","    ","    \/\/ build buttons","    let button1 = TMTicketsModule.ActionButton(title: \"One\")","    let button2 = TMTicketsModule.ActionButton(title: \"Two\")","    let button3 = TMTicketsModule.ActionButton(title: \"Three\")","","    \/\/ build module with header and buttons","    let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                 headerDisplay: header,","                                 actionButtons: [button1, button2, button3])","    ","    \/\/ return module","    completion([module])","}"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Output:","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"identifier":"Module_DefinedAspect.jpg","type":"image"}],"type":"paragraph"},{"text":"Custom Header Image","type":"heading","anchor":"Custom-Header-Image","level":2},{"inlineContent":[{"type":"text","text":"Headers can also be created with a UIImage (as a convenience). The aspect ratio of the Header is inherited from the size of the UIImage."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Build a module with an Image header, aspect ratio is defined by Image size:"}]}]}]},{"syntax":null,"type":"codeListing","code":["func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","    \/\/ load UIImage","    let image = UIImage(imageLiteralResourceName: \"HotDogs.jpg\")","    ","    \/\/ build header with UIImage","    let header = TMTicketsModule.HeaderDisplay(image: image)","    ","    \/\/ build buttons","    let button1 = TMTicketsModule.ActionButton(title: \"One\")","    let button2 = TMTicketsModule.ActionButton(title: \"Two\")","    let button3 = TMTicketsModule.ActionButton(title: \"Three\")","","    \/\/ build module with header and buttons","    let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                 headerDisplay: header,","                                 actionButtons: [button1, button2, button3])","    ","    \/\/ return module","    completion([module])","}"]},{"items":[{"content":[{"inlineContent":[{"text":"Output:","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"identifier":"Module_Image.jpg","type":"image"}]},{"level":2,"text":"HeaderView Builder","anchor":"HeaderView-Builder","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"While you are welcome to build a Header using any UIView, a helpful Header builder has been provided.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModuleHeaderView"},{"text":" can help you quickly build a UIView for presentation.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The header builder supports:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Three lines of custom Text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Gradient overlay (from top-left and bottom-right corners)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"UIColor background"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"TMTicketsModuleHeaderView\/configure(topLabelText:topLabelTextAlignment:centerLabelText:centerLabelTextAlignment:bottomLabelText:bottomLabelTextAlignment:gradientAlpha:backgroundColor:)","type":"codeVoice"}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"UIImage background"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"TMTicketsModuleHeaderView\/configure(topLabelText:topLabelTextAlignment:centerLabelText:centerLabelTextAlignment:bottomLabelText:bottomLabelTextAlignment:gradientAlpha:backgroundImage:backgroundImageURL:)","type":"codeVoice"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"MKCoordinateRegion map"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"TMTicketsModuleHeaderView\/configure(topLabelText:topLabelTextAlignment:centerLabelText:centerLabelTextAlignment:bottomLabelText:bottomLabelTextAlignment:gradientAlpha:mapCoordinateRegion:mapAnnotation:)"}]}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"QR Code"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"TMTicketsModuleHeaderView\/configure(topLabelText:topLabelTextAlignment:centerLabelText:centerLabelTextAlignment:bottomLabelText:bottomLabelTextAlignment:gradientAlpha:backgroundImage:backgroundImageURL:qrCodeValue:)"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"2D Barcode"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"TMTicketsModuleHeaderView\/configure(topLabelText:topLabelTextAlignment:centerLabelText:centerLabelTextAlignment:bottomLabelText:bottomLabelTextAlignment:gradientAlpha:backgroundImage:backgroundImageURL:barcode2DValue:)"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Audio\/Video Content"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"TMTicketsModuleHeaderView\/configure(topLabelText:topLabelTextAlignment:centerLabelText:centerLabelTextAlignment:bottomLabelText:bottomLabelTextAlignment:gradientAlpha:avContentURL:disableLoopingContent:disableAVAudio:)"}],"type":"paragraph"}]}]}]}]},{"text":"HeaderView Builder: Color","level":2,"anchor":"HeaderView-Builder-Color","type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Build a module with a Red header, using the Header View builder:"}]}]}]},{"code":["func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","    \/\/ build a UIView (with default aspect ratio 3x2)","    let headerView = TMTicketsModuleHeaderView.build()","    headerView.configure(backgroundColor: .red)","    ","    \/\/ build header with HeaderView (a UIView)","    let header = TMTicketsModule.HeaderDisplay(view: headerView)","    ","    \/\/ build buttons","    let button1 = TMTicketsModule.ActionButton(title: \"One\")","    let button2 = TMTicketsModule.ActionButton(title: \"Two\")","    let button3 = TMTicketsModule.ActionButton(title: \"Three\")","","    \/\/ build module with header and buttons","    let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                 headerDisplay: header,","                                 actionButtons: [button1, button2, button3])","    ","    \/\/ return module","    completion([module])","}"],"syntax":null,"type":"codeListing"},{"items":[{"content":[{"inlineContent":[{"text":"Output:","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"Module_DefaultAspect.jpg"}]},{"type":"heading","anchor":"HeaderView-Builder-Image-+-Text-+-Gradient","level":2,"text":"HeaderView Builder: Image + Text + Gradient"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Build a module with an Image, Text, and Gradient:"}]}]}]},{"type":"codeListing","code":["func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","    \/\/ load UIImage","    let image = UIImage(imageLiteralResourceName: \"HotDogs.jpg\")","    ","    \/\/ build a UIView with a text, gradient, and image","    let headerView = TMTicketsModuleHeaderView.build()","    headerView.configure(topLabelText: \"Food\",","                         topLabelTextAlignment: .left,","                         centerLabelText: \"Drinks\",","                         centerLabelTextAlignment: .center,","                         bottomLabelText: \"Fun\",","                         bottomLabelTextAlignment: .right,","                         gradientAlpha: 1.0,","                         backgroundImage: image)","    ","    \/\/ build header with HeaderView (a UIView)","    let header = TMTicketsModule.HeaderDisplay(view: headerView)","    ","    \/\/ build buttons","    let button1 = TMTicketsModule.ActionButton(title: \"One\")","    let button2 = TMTicketsModule.ActionButton(title: \"Two\")","    let button3 = TMTicketsModule.ActionButton(title: \"Three\")","","    \/\/ build module with header and buttons","    let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                 headerDisplay: header,","                                 actionButtons: [button1, button2, button3])","    ","    \/\/ return module","    completion([module])","}"],"syntax":null},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Output:"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"Module_ImageText.jpg"}]},{"anchor":"HeaderView-Builder-Map","type":"heading","level":2,"text":"HeaderView Builder: Map"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Build a module with a Map and Text:","type":"text"}]}]}],"type":"unorderedList"},{"syntax":null,"code":["func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","    \/\/ define map region and zoom (span)","    let mapRegion = MKCoordinateRegion(","        center: CLLocationCoordinate2D(latitude: 34.0734, longitude: -118.2402),","        span: MKCoordinateSpan(latitudeDelta: 0.02, longitudeDelta: 0.02))","    ","    \/\/ define map point of interest","    let mapAnnotation = TMTicketsModuleHeaderView.MapAnnotation(","        coordinate: CLLocationCoordinate2D(latitude: 34.0735, longitude: -118.2456),","        title: \"Lot 1\")","    ","    \/\/ build a UIView with a text, gradient, and image","    let headerView = TMTicketsModuleHeaderView.build()","    headerView.configure(topLabelText: \"Parking: Lot 1\",","                         mapCoordinateRegion: mapRegion,","                         mapAnnotation: mapAnnotation)","    ","    \/\/ build header with HeaderView (a UIView)","    let header = TMTicketsModule.HeaderDisplay(view: headerView)","    ","    \/\/ build buttons","    let button1 = TMTicketsModule.ActionButton(title: \"One\")","    let button2 = TMTicketsModule.ActionButton(title: \"Two\")","    let button3 = TMTicketsModule.ActionButton(title: \"Three\")","","    \/\/ build module with header and buttons","    let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                 headerDisplay: header,","                                 actionButtons: [button1, button2, button3])","    ","    \/\/ return module","    completion([module])","}"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Output:"}],"type":"paragraph"}]}]},{"inlineContent":[{"identifier":"Module_MapText.jpg","type":"image"}],"type":"paragraph"},{"text":"HeaderView Builder: QR Code","type":"heading","level":2,"anchor":"HeaderView-Builder-QR-Code"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Build a module with a QR Code, Image, Gradient and Text:"}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","    \/\/ build a UIView with a text, QR code, gradient, and image","    let headerView = TMTicketsModuleHeaderView.build()","    headerView.configure(topLabelText: \"Broncos Fan Voucher\",","                         bottomLabelText: \"Stored Value: $58.90\",","                         gradientAlpha: 1.0,","                         backgroundImage: UIImage(named: \"BroncosPlay.jpg\"),","                         qrCodeValue: \"1234567890ABCDEF\")","","    \/\/ build header with HeaderView (a UIView)","    let header = TMTicketsModule.HeaderDisplay(view: headerView)","","    \/\/ build module with header, but no buttons","    let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                 headerDisplay: header,","                                 actionButtons: nil) \/\/ no buttons","    ","    \/\/ return module","    completion([module])","}"],"type":"codeListing","syntax":null},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Output:"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"identifier":"Module_QRText.jpg","type":"image"}]},{"level":2,"type":"heading","text":"HeaderView Builder: Video","anchor":"HeaderView-Builder-Video"},{"inlineContent":[{"text":"The video will start playing as soon as the user scrolls down to the module.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Build a module with a Video and Text:"}]}]}]},{"syntax":null,"code":["func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","    \/\/ load video from local file or web URL","    let ticketsMovieURL = Bundle.main.url(forResource: \"BroncosMobileTickets\", withExtension: \"mp4\")!","    ","    \/\/ build a UIView with a text, QR code, and image","    let headerView = TMTicketsModuleHeaderView.build()","    headerView.configure(topLabelText: \"Entry Demo\",","                         avContentURL: ticketsMovieURL)","    ","    \/\/ build header with HeaderView (a UIView)","    let header = TMTicketsModule.HeaderDisplay(view: headerView)","","    \/\/ build buttons","    let button1 = TMTicketsModule.ActionButton(title: \"One\")","    let button2 = TMTicketsModule.ActionButton(title: \"Two\")","    let button3 = TMTicketsModule.ActionButton(title: \"Three\")","","    \/\/ build module with header and buttons","    let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                 headerDisplay: header,","                                 actionButtons: [button1, button2, button3])","    ","    \/\/ return module","    completion([module])","}"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Output:","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"identifier":"Module_VideoText.jpg","type":"image"}],"type":"paragraph"},{"text":"Buttons","level":2,"type":"heading","anchor":"Buttons"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Buttons ("},{"type":"reference","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule\/ActionButton","isActive":true},{"type":"text","text":") are assigned Actions that occur when the button is pressed."}]},{"inlineContent":[{"type":"text","text":"Currently, only two Actions are supported:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"open a given webpage inside Tickets SDK (in a webview)","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"callback to module delegate (inside your app)","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"text":"Note that a Module can contain a Header with no Buttons, or Buttons with no Header.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Button-Action-Callback","text":"Button Action: Callback","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If webpage settings are not defined on the "},{"identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule\/ActionButton","isActive":true,"type":"reference"},{"text":", then when the user presses the button, the callback method on the module delegate will be called: ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModuleDelegate\/handleModuleActionButton(event:module:button:completion:)"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Build three buttons (with no header):"}]}]}],"type":"unorderedList"},{"syntax":null,"type":"codeListing","code":["extension MyClass: TMTicketsModuleDelegate {","    ","    func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","        \/\/ build buttons","        let button1 = TMTicketsModule.ActionButton(title: \"One\")","        let button2 = TMTicketsModule.ActionButton(title: \"Two\")","        let button3 = TMTicketsModule.ActionButton(title: \"Three\")","","        \/\/ build module with header and buttons","        let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                     headerDisplay: nil, \/\/ no header","                                     actionButtons: [button1, button2, button3])","        ","        \/\/ return module","        completion([module])","    }","    ","    func handleModuleActionButton(","        event: TMPurchasedEvent,","        module: TMTicketsModule,","        button: TMTicketsModule.ActionButton,","        completion: @escaping (TMTicketsModule.WebpageSettings?) -> Void) {","","        \/\/ this is not called if webpage settings are already defined","        if module.identifier == \"com.myDemoApp.demoModule\" {","            if button.callbackValue == \"One\" {","                print(\"Action: One\")","                \/\/ handle in your own code, do not close modal Tickets Listing page ","                \/\/ do not call completion","                handle(button: button)","                ","            } else if button.callbackValue == \"Two\" {","                print(\"Action: Two\")","                \/\/ handle in your own code, but first close modal Tickets Listing page","                \/\/ call completion with nil","                completion(nil)","                handle(button: button)","","            } else if button.callbackValue == \"Three\" {","                print(\"Action: Three\")","                \/\/ open a webpage inside Tickets SDK (webview)","                let request = URLRequest(url: URL(string: \"https:\/\/www.mlb.com\")!)","                let settings = TMTicketsModule.WebpageSettings(pageTitle: \"MLB Homepage\",","                                                               urlRequest: request)","                \/\/ call completion with webpage settings","                completion(settings)","            }","        }","    }","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Output:","type":"text"}]}]}]},{"inlineContent":[{"type":"image","identifier":"Button_Three.jpg"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Button Action: Callback Completion","anchor":"Button-Action-Callback-Completion"},{"inlineContent":[{"type":"text","text":"Notice that the handleModuleActionButton delegate method has a completion closure."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This is used to inform Tickets SDK of which behavior you would like when the user presses a Module Button.","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Do not close modal Tickets Listing page and handle button in your own code:"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":null,"code":["if button.callbackValue == \"One\" {","    print(\"Action: One\")","    \/\/ handle in your own code, do not close modal Tickets Listing page ","    \/\/ do not call completion","    handle(button: button)"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Close modal Tickets Listing page first, then handle button in your own code:"}]}]}],"type":"unorderedList"},{"syntax":null,"code":["} else if button.callbackValue == \"Two\" {","    print(\"Action: Two\")","    \/\/ handle in your own code, but first close modal Tickets Listing page","    \/\/ call completion with nil","    completion(nil)","    handle(button: button)"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Do not close modal Tickets Listing page, have Tickets SDK open a webpage for you:"}]}]}]},{"syntax":null,"code":["} else if button.callbackValue == \"Three\" {","    print(\"Action: Three\")","    \/\/ open a webpage inside Tickets SDK (webview)","    let request = URLRequest(url: URL(string: \"https:\/\/www.mlb.com\")!)","    let settings = TMTicketsModule.WebpageSettings(pageTitle: \"MLB Homepage\",","                                                   urlRequest: request)","    \/\/ call completion with webpage settings","    completion(settings)"],"type":"codeListing"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Output:"}]}]}]},{"inlineContent":[{"identifier":"Button_MLBWebpage.jpg","type":"image"}],"type":"paragraph"},{"type":"heading","anchor":"Button-Action-Webpage-Settings","text":"Button Action: Webpage Settings","level":2},{"inlineContent":[{"text":"You can provide the Button webpage settings ahead of time instead of waiting for the callback.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Note that is this case, the handleModuleActionButton delegate method will not be called.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Build one button with pre-defined webpage settings (with no header):","type":"text"}]}]}]},{"type":"codeListing","code":["func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","    \/\/ build webpage settings","    let request = URLRequest(url: URL(string: \"https:\/\/www.mlb.com\")!)","    let settings = TMTicketsModule.WebpageSettings(pageTitle: \"MLB Homepage\",","                                                   urlRequest: request)","    ","    \/\/ build buttons","    let button1 = TMTicketsModule.ActionButton(title: \"One\",","                                               webpageSettings: settings)","    ","    \/\/ build module with header and buttons","    let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                 headerDisplay: nil, \/\/ no header","                                 actionButtons: [button1])","    ","    \/\/ return module","    completion([module])","}"],"syntax":null},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Output:","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"Button_MLBWebpage.jpg"}]},{"level":2,"anchor":"Button-Action-Webpage-Settings-+-State","type":"heading","text":"Button Action: Webpage Settings + State"},{"inlineContent":[{"type":"text","text":"Typically you will want to pass in some state variables to the webpage. For example, maybe which event the user is viewing."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"This can be done with URL parameters.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"You may also want to pass values securely. For example, the user’s login state (oauth token).","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be done with "},{"type":"reference","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule\/OAuthCookieSettings","isActive":true},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Build button with pre-defined webpage settings including eventID and user OAuthToken:"}]}]}],"type":"unorderedList"},{"type":"codeListing","code":["func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","    \/\/ build cookie settings","    let cookie = TMTicketsModule.OAuthCookieSettings(name: \"userAuth\",","                                                     value: \"oauthToken1234\",","                                                     webDomains: [\".mlb.com\"])","    ","    \/\/ build webpage settings with parameters","    let request = URLRequest(url: URL(string: \"https:\/\/www.mlb.com?event=\\(event.info.identifier)\")!)","    let settings = TMTicketsModule.WebpageSettings(pageTitle: \"MLB Homepage\",","                                                   urlRequest: request,","                                                   oauthCookieSettings: cookie)","    ","    \/\/ build buttons","    let button1 = TMTicketsModule.ActionButton(title: \"One\",","                                               webpageSettings: settings)","    ","    \/\/ build module with header and buttons","    let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                 headerDisplay: nil, \/\/ no header","                                 actionButtons: [button1])","    ","    \/\/ return module","    completion([module])","}"],"syntax":null},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also easily attach Ticketmaster OAuth Tokens this way:"}]}]}]},{"code":["func addCustomModules(event: TMPurchasedEvent, completion: @escaping ([TMTicketsModule]?) -> Void) {","    \/\/ build cookie settings (attaching Ticketmaster Archtics Modern Accounts token)","    let cookie = TMTicketsModule.OAuthCookieSettings(name: \"tmOAuth\",","                                                     webDomains: [\".mlb.com\"],","                                                     backend: .TeamModernAccounts)","    ","    \/\/ build webpage settings with parameters","    let request = URLRequest(url: URL(string: \"https:\/\/www.mlb.com?event=\\(event.info.identifier)\")!)","    let settings = TMTicketsModule.WebpageSettings(pageTitle: \"MLB Homepage\",","                                                   urlRequest: request,","                                                   oauthCookieSettings: cookie)","    ","    \/\/ build buttons","    let button1 = TMTicketsModule.ActionButton(title: \"One\",","                                               webpageSettings: settings)","    ","    \/\/ build module with header and buttons","    let module = TMTicketsModule(identifier: \"com.myDemoApp.demoModule\",","                                 headerDisplay: nil, \/\/ no header","                                 actionButtons: [button1])","    ","    \/\/ return module","    completion([module])","}"],"type":"codeListing","syntax":null},{"text":"Pre-Built Modules","level":2,"anchor":"Pre-Built-Modules","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A few basic modules have already been created for you, see: "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsPrebuiltModule"}]},{"type":"heading","anchor":"API-Documentation","level":2,"text":"API Documentation"},{"inlineContent":[{"type":"text","text":"For more options see: "},{"isActive":true,"identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule","type":"reference"}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://com.ticketmaster.TicketmasterTickets/documentation/TicketmasterTickets/TMTicketsModuleDelegate/handleModuleActionButton(event:module:button:completion:)":{"identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModuleDelegate\/handleModuleActionButton(event:module:button:completion:)","required":true,"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"handleModuleActionButton"},{"text":"(","kind":"text"},{"text":"event","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TMPurchasedEvent","kind":"typeIdentifier","preciseIdentifier":"s:19TicketmasterTickets16TMPurchasedEventV"},{"kind":"text","text":", "},{"text":"module","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@TicketmasterTickets@objc(cs)TMTicketsModule","text":"TMTicketsModule"},{"kind":"text","text":", "},{"text":"button","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@TicketmasterTickets@objc(cs)TMTicketsModule","text":"TMTicketsModule"},{"text":".","kind":"text"},{"text":"ActionButton","kind":"typeIdentifier","preciseIdentifier":"s:19TicketmasterTickets15TMTicketsModuleC12ActionButtonC"},{"kind":"text","text":", "},{"text":"completion","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"openWebpageSettings","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"TMTicketsModule","kind":"typeIdentifier","preciseIdentifier":"c:@M@TicketmasterTickets@objc(cs)TMTicketsModule"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:19TicketmasterTickets15TMTicketsModuleC15WebpageSettingsC","text":"WebpageSettings"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/ticketmastertickets\/tmticketsmoduledelegate\/handlemoduleactionbutton(event:module:button:completion:)","kind":"symbol","role":"symbol","abstract":[{"text":"Method is invoked if user has pressed a button on a custom module, and unique handling is required.","type":"text"}],"title":"handleModuleActionButton(event:module:button:completion:)"},"Module_QRText.jpg":{"type":"image","identifier":"Module_QRText.jpg","alt":"QR Code Header","variants":[{"url":"\/images\/com.ticketmaster.TicketmasterTickets\/Module_QRText.jpg","traits":["1x","light"]}]},"Module_Image.jpg":{"type":"image","identifier":"Module_Image.jpg","alt":"Image Header","variants":[{"url":"\/images\/com.ticketmaster.TicketmasterTickets\/Module_Image.jpg","traits":["1x","light"]}]},"doc://com.ticketmaster.TicketmasterTickets/documentation/TicketmasterTickets/TMTicketsModule/ActionButton":{"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActionButton"}],"identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule\/ActionButton","title":"TMTicketsModule.ActionButton","url":"\/documentation\/ticketmastertickets\/tmticketsmodule\/actionbutton","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ActionButton"}],"abstract":[],"type":"topic"},"doc://com.ticketmaster.TicketmasterTickets/documentation/TicketmasterTickets/TMTicketsModule":{"type":"topic","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule","navigatorTitle":[{"kind":"identifier","text":"TMTicketsModule"}],"abstract":[{"text":"create a custom module to be displayed underneath the user’s list of Tickets on the Tickets listing page","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TMTicketsModule"}],"role":"symbol","kind":"symbol","title":"TMTicketsModule","url":"\/documentation\/ticketmastertickets\/tmticketsmodule"},"doc://com.ticketmaster.TicketmasterTickets/documentation/TicketmasterTickets/TMTicketsModule/init(identifier:headerDisplay:actionButtons:)":{"title":"init(identifier:headerDisplay:actionButtons:)","type":"topic","kind":"symbol","url":"\/documentation\/ticketmastertickets\/tmticketsmodule\/init(identifier:headerdisplay:actionbuttons:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":", ","kind":"text"},{"text":"headerDisplay","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HeaderDisplay","kind":"typeIdentifier","preciseIdentifier":"s:19TicketmasterTickets15TMTicketsModuleC13HeaderDisplayC"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"actionButtons"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:19TicketmasterTickets15TMTicketsModuleC12ActionButtonC","kind":"typeIdentifier","text":"ActionButton"},{"text":"]?)","kind":"text"}],"abstract":[{"text":"create a module with the given identifier, header, and action buttons","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule\/init(identifier:headerDisplay:actionButtons:)"},"Module_DefaultAspect.jpg":{"type":"image","identifier":"Module_DefaultAspect.jpg","alt":"Color Header","variants":[{"traits":["1x","light"],"url":"\/images\/com.ticketmaster.TicketmasterTickets\/Module_DefaultAspect.jpg"}]},"doc://com.ticketmaster.TicketmasterTickets/documentation/TicketmasterTickets/TMTicketsPrebuiltModule":{"url":"\/documentation\/ticketmastertickets\/tmticketsprebuiltmodule","title":"TMTicketsPrebuiltModule","abstract":[{"text":"useful pre-built ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule"},{"text":" for the Tickets listing page","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"TMTicketsPrebuiltModule","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TMTicketsPrebuiltModule"}],"kind":"symbol","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsPrebuiltModule","type":"topic","role":"symbol"},"doc://com.ticketmaster.TicketmasterTickets/documentation/TicketmasterTickets/TMTicketsModule/HeaderDisplay-swift.class":{"url":"\/documentation\/ticketmastertickets\/tmticketsmodule\/headerdisplay-swift.class","title":"TMTicketsModule.HeaderDisplay","abstract":[],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"HeaderDisplay","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"HeaderDisplay"}],"kind":"symbol","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule\/HeaderDisplay-swift.class","type":"topic","role":"symbol"},"doc://com.ticketmaster.TicketmasterTickets/documentation/TicketmasterTickets/TMTicketsModule/OAuthCookieSettings":{"abstract":[],"identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModule\/OAuthCookieSettings","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"OAuthCookieSettings","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"OAuthCookieSettings"}],"url":"\/documentation\/ticketmastertickets\/tmticketsmodule\/oauthcookiesettings","type":"topic","title":"TMTicketsModule.OAuthCookieSettings"},"doc://com.ticketmaster.TicketmasterTickets/documentation/TicketmasterTickets/TMTicketsModuleHeaderView":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModuleHeaderView","url":"\/documentation\/ticketmastertickets\/tmticketsmoduleheaderview","kind":"symbol","abstract":[{"text":"quickly build a UIView for ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModuleHeaderView","isActive":true}],"title":"TMTicketsModuleHeaderView","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TMTicketsModuleHeaderView"}],"navigatorTitle":[{"kind":"identifier","text":"TMTicketsModuleHeaderView"}]},"Button_Three.jpg":{"type":"image","identifier":"Button_Three.jpg","alt":"Buttons without Header","variants":[{"url":"\/images\/com.ticketmaster.TicketmasterTickets\/Button_Three.jpg","traits":["1x","light"]}]},"doc://com.ticketmaster.TicketmasterTickets/documentation/TicketmasterTickets":{"identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets","kind":"symbol","title":"TicketmasterTickets","url":"\/documentation\/ticketmastertickets","role":"collection","type":"topic","abstract":[{"type":"text","text":"Implementation of Ticketmaster post-purchase functionality such as viewing purchased Events, Tickets, and Barcodes."}]},"Module_MapText.jpg":{"type":"image","identifier":"Module_MapText.jpg","alt":"Map Header","variants":[{"traits":["1x","light"],"url":"\/images\/com.ticketmaster.TicketmasterTickets\/Module_MapText.jpg"}]},"Button_MLBWebpage.jpg":{"type":"image","identifier":"Button_MLBWebpage.jpg","alt":"MLB Webpage","variants":[{"url":"\/images\/com.ticketmaster.TicketmasterTickets\/Button_MLBWebpage.jpg","traits":["1x","light"]}]},"Module_DefinedAspect.jpg":{"type":"image","identifier":"Module_DefinedAspect.jpg","alt":"1x1 Custom Aspect Header","variants":[{"traits":["1x","light"],"url":"\/images\/com.ticketmaster.TicketmasterTickets\/Module_DefinedAspect.jpg"}]},"Module_VideoText.jpg":{"type":"image","identifier":"Module_VideoText.jpg","alt":"Video Header","variants":[{"url":"\/images\/com.ticketmaster.TicketmasterTickets\/Module_VideoText.jpg","traits":["1x","light"]}]},"Module_ImageText.jpg":{"type":"image","identifier":"Module_ImageText.jpg","alt":"Image Text Gradient Header","variants":[{"traits":["1x","light"],"url":"\/images\/com.ticketmaster.TicketmasterTickets\/Module_ImageText.jpg"}]},"doc://com.ticketmaster.TicketmasterTickets/documentation/TicketmasterTickets/TMTicketsModuleDelegate/addCustomModules(event:completion:)":{"title":"addCustomModules(event:completion:)","type":"topic","kind":"symbol","url":"\/documentation\/ticketmastertickets\/tmticketsmoduledelegate\/addcustommodules(event:completion:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"addCustomModules","kind":"identifier"},{"kind":"text","text":"("},{"text":"event","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:19TicketmasterTickets16TMPurchasedEventV","text":"TMPurchasedEvent","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"completion","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"customModuleArray"},{"text":": [","kind":"text"},{"preciseIdentifier":"c:@M@TicketmasterTickets@objc(cs)TMTicketsModule","text":"TMTicketsModule","kind":"typeIdentifier"},{"kind":"text","text":"]?) -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Method is invoked when the user is viewing a specific Event. Client app needs to define an array of custom modules (if any) and return them to the Tickets SDK.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.ticketmaster.TicketmasterTickets\/documentation\/TicketmasterTickets\/TMTicketsModuleDelegate\/addCustomModules(event:completion:)","required":true}},"variantOverrides":[{"traits":[{"interfaceLanguage":"occ"}],"patch":[{"op":"replace","value":"occ","path":"\/identifier\/interfaceLanguage"},{"op":"add","path":"\/topicSections","value":null},{"path":"\/seeAlsoSections","value":null,"op":"add"},{"op":"replace","value":"TMTicketsModule","path":"\/references\/doc:~1~1com.ticketmaster.TicketmasterTickets~1documentation~1TicketmasterTickets~1TMTicketsModule\/title"},{"path":"\/references\/doc:~1~1com.ticketmaster.TicketmasterTickets~1documentation~1TicketmasterTickets~1TMTicketsModule\/fragments","op":"replace","value":[{"text":"TMTicketsModule","kind":"identifier"}]},{"op":"replace","value":[{"kind":"identifier","text":"TMTicketsModule"}],"path":"\/references\/doc:~1~1com.ticketmaster.TicketmasterTickets~1documentation~1TicketmasterTickets~1TMTicketsModule\/navigatorTitle"},{"op":"replace","path":"\/references\/doc:~1~1com.ticketmaster.TicketmasterTickets~1documentation~1TicketmasterTickets~1TMTicketsModuleHeaderView\/title","value":"TMTicketsModuleHeaderView"},{"op":"replace","path":"\/references\/doc:~1~1com.ticketmaster.TicketmasterTickets~1documentation~1TicketmasterTickets~1TMTicketsModuleHeaderView\/fragments","value":[{"text":"TMTicketsModuleHeaderView","kind":"identifier"}]},{"path":"\/references\/doc:~1~1com.ticketmaster.TicketmasterTickets~1documentation~1TicketmasterTickets~1TMTicketsModuleHeaderView\/navigatorTitle","value":[{"text":"TMTicketsModuleHeaderView","kind":"identifier"}],"op":"replace"}]}]}